<<<<<<<
<<<<<<<



<<<<<<<















/**































































 * ÁΩëÁªúËøûÊé•ÊµãËØïËÑöÊú¨































































 * Áî®‰∫éÊµãËØïGemini APIÁöÑÁΩëÁªúËøûÊé•ÂíåÊïÖÈöúËΩ¨ÁßªÊú∫Âà∂































































 */































































































































// ÊµãËØïHTTP APIËøûÊé•































































async function testHttpConnection(baseUrl, apiKey) {































































  console.log(`Testing HTTP connection to: ${baseUrl}`);































































  































































  try {































































    const response = await fetch(`${baseUrl}/v1beta/models`, {































































      headers: {































































        'x-goog-api-key': apiKey,































































        'x-goog-api-client': 'genai-js/0.21.0'































































      }































































    });































































    































































    if (response.ok) {































































      console.log(`‚úÖ HTTP connection successful: ${baseUrl}`);































































      return true;































































    } else {































































      console.log(`‚ùå HTTP connection failed: ${baseUrl} (Status: ${response.status})`);































































      return false;































































    }































































  } catch (error) {































































    console.log(`‚ùå HTTP connection error: ${baseUrl} (${error.message})`);































































    return false;































































  }































































}































































































































// ÊµãËØïWebSocketËøûÊé•































































async function testWebSocketConnection(baseUrl, apiKey) {































































  console.log(`Testing WebSocket connection to: ${baseUrl}`);































































  































































  return new Promise((resolve) => {































































    const wsUrl = `${baseUrl.replace('https://', 'wss:')}/v1beta/models/gemini-live-2.5-flash-preview:streamingGenerateContent?key=${apiKey}`;































































    































































    const ws = new WebSocket(wsUrl);































































    const timeout = setTimeout(() => {































































      console.log(`‚ùå WebSocket connection timeout: ${baseUrl}`);































































      ws.close();































































      resolve(false);































































    }, 10000);































































    































































    ws.onopen = () => {































































      clearTimeout(timeout);































































      console.log(`‚úÖ WebSocket connection successful: ${baseUrl}`);































































      ws.close();































































      resolve(true);































































    };































































    































































    ws.onerror = (error) => {































































      clearTimeout(timeout);































































      console.log(`‚ùå WebSocket connection error: ${baseUrl}`);































































      resolve(false);































































    };































































  });































































}































































































































// ‰∏ªÊµãËØïÂáΩÊï∞































































async function runNetworkTest() {































































  console.log('üîç ÂºÄÂßãÁΩëÁªúËøûÊé•ÊµãËØï...\n');































































  































































  // ‰ªéÁéØÂ¢ÉÂèòÈáèÊàñÈªòËÆ§ÂÄºËé∑ÂèñÈÖçÁΩÆ































































  const apiKey = process.env.GEMINI_API_KEY || 'your-api-key-here';































































  const baseUrl = process.env.GEMINI_API_BASE_URL || 'https://generativelanguage.googleapis.com';































































  const fallbackUrls = (process.env.GEMINI_API_FALLBACK_URLS || 'https://generativelanguage.googleapis.com')































































    .split(',').map(url => url.trim());































































  































































  console.log(`API Key: ${apiKey.substring(0, 10)}...`);































































  console.log(`Base URL: ${baseUrl}`);































































  console.log(`Fallback URLs: ${fallbackUrls.join(', ')}\n`);































































  































































  if (apiKey === 'your-api-key-here') {































































    console.log('‚ö†Ô∏è  ËØ∑ËÆæÁΩÆ GEMINI_API_KEY ÁéØÂ¢ÉÂèòÈáè');































































    console.log('   export GEMINI_API_KEY="your-actual-api-key"');































































    return;































































  }































































  































































  // ÊµãËØï‰∏ªURL































































  console.log('üì° ÊµãËØï‰∏ªURL...');































































  const httpSuccess = await testHttpConnection(baseUrl, apiKey);































































  const wsSuccess = await testWebSocketConnection(baseUrl, apiKey);































































  































































  if (httpSuccess && wsSuccess) {































































    console.log('\n‚úÖ ‰∏ªURLËøûÊé•Ê≠£Â∏∏ÔºåÊó†ÈúÄ‰ΩøÁî®Â§áÁî®URL');































































    return;































































  }































































  































































  // ÊµãËØïÂ§áÁî®URLs































































  console.log('\nüì° ÊµãËØïÂ§áÁî®URLs...');































































  let foundWorking = false;































































  































































  for (const url of fallbackUrls) {































































    if (url === baseUrl) continue; // Ë∑≥ËøáÂ∑≤ÊµãËØïÁöÑ‰∏ªURL































































    































































    const httpOk = await testHttpConnection(url, apiKey);































































    const wsOk = await testWebSocketConnection(url, apiKey);































































    































































    if (httpOk && wsOk) {































































      console.log(`\n‚úÖ ÊâæÂà∞ÂèØÁî®ÁöÑÂ§áÁî®URL: ${url}`);































































      console.log(`   Âª∫ËÆÆÂ∞ÜÊ≠§URLËÆæÁΩÆ‰∏∫‰∏ªURLÔºö`);































































      console.log(`   export GEMINI_API_BASE_URL="${url}"`);































































      foundWorking = true;































































      break;































































    }































































  }































































  































































  if (!foundWorking) {































































    console.log('\n‚ùå ÊâÄÊúâURLÈÉΩÊó†Ê≥ïËøûÊé•');































































    console.log('   Âª∫ËÆÆÊ£ÄÊü•Ôºö');































































    console.log('   1. ÁΩëÁªúËøûÊé•ÊòØÂê¶Ê≠£Â∏∏');































































    console.log('   2. APIÂØÜÈí•ÊòØÂê¶Ê≠£Á°Æ');































































    console.log('   3. ÊòØÂê¶ÈúÄË¶Å‰ΩøÁî®‰ª£ÁêÜ');































































    console.log('   4. Èò≤ÁÅ´Â¢ôËÆæÁΩÆ');































































  }































































}































































































































// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨































































if (typeof window === 'undefined' && typeof process !== 'undefined') {































































  runNetworkTest().catch(console.error);































































}































































































































// ÂØºÂá∫‰æõÂÖ∂‰ªñÊ®°Âùó‰ΩøÁî®































































if (typeof module !== 'undefined' && module.exports) {































































  module.exports = {































































    testHttpConnection,































































    testWebSocketConnection,































































    runNetworkTest































































  };































































}































































=======















/**































 * ÁΩëÁªúËøûÊé•ÊµãËØïËÑöÊú¨































 * Áî®‰∫éÊµãËØïGemini APIÁöÑÁΩëÁªúËøûÊé•ÂíåÊïÖÈöúËΩ¨ÁßªÊú∫Âà∂































 */































































// ÊµãËØïHTTP APIËøûÊé•































async function testHttpConnection(baseUrl, apiKey) {































  console.log(`Testing HTTP connection to: ${baseUrl}`);































  































  try {































    const response = await fetch(`${baseUrl}/v1beta/models`, {































      headers: {































        'x-goog-api-key': apiKey,































        'x-goog-api-client': 'genai-js/0.21.0'































      }































    });































    































    if (response.ok) {































      console.log(`‚úÖ HTTP connection successful: ${baseUrl}`);































      return true;































    } else {































      console.log(`‚ùå HTTP connection failed: ${baseUrl} (Status: ${response.status})`);































      return false;































    }































  } catch (error) {































    console.log(`‚ùå HTTP connection error: ${baseUrl} (${error.message})`);































    return false;































  }































}































































// ÊµãËØïWebSocketËøûÊé•































async function testWebSocketConnection(baseUrl, apiKey) {































  console.log(`Testing WebSocket connection to: ${baseUrl}`);































  































  return new Promise((resolve) => {































    const wsUrl = `${baseUrl.replace('https://', 'wss:')}/v1beta/models/gemini-live-2.5-flash-preview:streamingGenerateContent?key=${apiKey}`;































    































    const ws = new WebSocket(wsUrl);































    const timeout = setTimeout(() => {































      console.log(`‚ùå WebSocket connection timeout: ${baseUrl}`);































      ws.close();































      resolve(false);































    }, 10000);































    































    ws.onopen = () => {































      clearTimeout(timeout);































      console.log(`‚úÖ WebSocket connection successful: ${baseUrl}`);































      ws.close();































      resolve(true);































    };































    































    ws.onerror = (error) => {































      clearTimeout(timeout);































      console.log(`‚ùå WebSocket connection error: ${baseUrl}`);































      resolve(false);































    };































  });































}































































// ‰∏ªÊµãËØïÂáΩÊï∞































async function runNetworkTest() {































  console.log('üîç ÂºÄÂßãÁΩëÁªúËøûÊé•ÊµãËØï...\n');































  































  // ‰ªéÁéØÂ¢ÉÂèòÈáèÊàñÈªòËÆ§ÂÄºËé∑ÂèñÈÖçÁΩÆ































  const apiKey = process.env.GEMINI_API_KEY || 'your-api-key-here';































  const baseUrl = process.env.GEMINI_API_BASE_URL || 'https://generativelanguage.googleapis.com';































  const fallbackUrls = (process.env.GEMINI_API_FALLBACK_URLS || 'https://generativelanguage.googleapis.com')































    .split(',').map(url => url.trim());































  































  console.log(`API Key: ${apiKey.substring(0, 10)}...`);































  console.log(`Base URL: ${baseUrl}`);































  console.log(`Fallback URLs: ${fallbackUrls.join(', ')}\n`);































  































  if (apiKey === 'your-api-key-here') {































    console.log('‚ö†Ô∏è  ËØ∑ËÆæÁΩÆ GEMINI_API_KEY ÁéØÂ¢ÉÂèòÈáè');































    console.log('   export GEMINI_API_KEY="your-actual-api-key"');































    return;































  }































  































  // ÊµãËØï‰∏ªURL































  console.log('üì° ÊµãËØï‰∏ªURL...');































  const httpSuccess = await testHttpConnection(baseUrl, apiKey);































  const wsSuccess = await testWebSocketConnection(baseUrl, apiKey);































  































  if (httpSuccess && wsSuccess) {































    console.log('\n‚úÖ ‰∏ªURLËøûÊé•Ê≠£Â∏∏ÔºåÊó†ÈúÄ‰ΩøÁî®Â§áÁî®URL');































    return;































  }































  































  // ÊµãËØïÂ§áÁî®URLs































  console.log('\nüì° ÊµãËØïÂ§áÁî®URLs...');































  let foundWorking = false;































  































  for (const url of fallbackUrls) {































    if (url === baseUrl) continue; // Ë∑≥ËøáÂ∑≤ÊµãËØïÁöÑ‰∏ªURL































    































    const httpOk = await testHttpConnection(url, apiKey);































    const wsOk = await testWebSocketConnection(url, apiKey);































    































    if (httpOk && wsOk) {































      console.log(`\n‚úÖ ÊâæÂà∞ÂèØÁî®ÁöÑÂ§áÁî®URL: ${url}`);































      console.log(`   Âª∫ËÆÆÂ∞ÜÊ≠§URLËÆæÁΩÆ‰∏∫‰∏ªURLÔºö`);































      console.log(`   export GEMINI_API_BASE_URL="${url}"`);































      foundWorking = true;































      break;































    }































  }































  































  if (!foundWorking) {































    console.log('\n‚ùå ÊâÄÊúâURLÈÉΩÊó†Ê≥ïËøûÊé•');































    console.log('   Âª∫ËÆÆÊ£ÄÊü•Ôºö');































    console.log('   1. ÁΩëÁªúËøûÊé•ÊòØÂê¶Ê≠£Â∏∏');































    console.log('   2. APIÂØÜÈí•ÊòØÂê¶Ê≠£Á°Æ');































    console.log('   3. ÊòØÂê¶ÈúÄË¶Å‰ΩøÁî®‰ª£ÁêÜ');































    console.log('   4. Èò≤ÁÅ´Â¢ôËÆæÁΩÆ');































  }































}































































// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨































if (typeof window === 'undefined' && typeof process !== 'undefined') {































  runNetworkTest().catch(console.error);































}































































// ÂØºÂá∫‰æõÂÖ∂‰ªñÊ®°Âùó‰ΩøÁî®































if (typeof module !== 'undefined' && module.exports) {































  module.exports = {































    testHttpConnection,































    testWebSocketConnection,































    runNetworkTest































  };































}































>>>>>>>















=======



/**







 * ÁΩëÁªúËøûÊé•ÊµãËØïËÑöÊú¨







 * Áî®‰∫éÊµãËØïGemini APIÁöÑÁΩëÁªúËøûÊé•ÂíåÊïÖÈöúËΩ¨ÁßªÊú∫Âà∂







 */















// ÊµãËØïHTTP APIËøûÊé•







async function testHttpConnection(baseUrl, apiKey) {







  console.log(`Testing HTTP connection to: ${baseUrl}`);







  







  try {







    const response = await fetch(`${baseUrl}/v1beta/models`, {







      headers: {







        'x-goog-api-key': apiKey,







        'x-goog-api-client': 'genai-js/0.21.0'







      }







    });







    







    if (response.ok) {







      console.log(`‚úÖ HTTP connection successful: ${baseUrl}`);







      return true;







    } else {







      console.log(`‚ùå HTTP connection failed: ${baseUrl} (Status: ${response.status})`);







      return false;







    }







  } catch (error) {







    console.log(`‚ùå HTTP connection error: ${baseUrl} (${error.message})`);







    return false;







  }







}















// ÊµãËØïWebSocketËøûÊé•







async function testWebSocketConnection(baseUrl, apiKey) {







  console.log(`Testing WebSocket connection to: ${baseUrl}`);







  







  return new Promise((resolve) => {







    const wsUrl = `${baseUrl.replace('https://', 'wss:')}/v1beta/models/gemini-live-2.5-flash-preview:streamingGenerateContent?key=${apiKey}`;







    







    const ws = new WebSocket(wsUrl);







    const timeout = setTimeout(() => {







      console.log(`‚ùå WebSocket connection timeout: ${baseUrl}`);







      ws.close();







      resolve(false);







    }, 10000);







    







    ws.onopen = () => {







      clearTimeout(timeout);







      console.log(`‚úÖ WebSocket connection successful: ${baseUrl}`);







      ws.close();







      resolve(true);







    };







    







    ws.onerror = (error) => {







      clearTimeout(timeout);







      console.log(`‚ùå WebSocket connection error: ${baseUrl}`);







      resolve(false);







    };







  });







}















// ‰∏ªÊµãËØïÂáΩÊï∞







async function runNetworkTest() {







  console.log('üîç ÂºÄÂßãÁΩëÁªúËøûÊé•ÊµãËØï...\n');







  







  // ‰ªéÁéØÂ¢ÉÂèòÈáèÊàñÈªòËÆ§ÂÄºËé∑ÂèñÈÖçÁΩÆ







  const apiKey = process.env.GEMINI_API_KEY || 'your-api-key-here';







  const baseUrl = process.env.GEMINI_API_BASE_URL || 'https://generativelanguage.googleapis.com';







  const fallbackUrls = (process.env.GEMINI_API_FALLBACK_URLS || 'https://generativelanguage.googleapis.com')







    .split(',').map(url => url.trim());







  







  console.log(`API Key: ${apiKey.substring(0, 10)}...`);







  console.log(`Base URL: ${baseUrl}`);







  console.log(`Fallback URLs: ${fallbackUrls.join(', ')}\n`);







  







  if (apiKey === 'your-api-key-here') {







    console.log('‚ö†Ô∏è  ËØ∑ËÆæÁΩÆ GEMINI_API_KEY ÁéØÂ¢ÉÂèòÈáè');







    console.log('   export GEMINI_API_KEY="your-actual-api-key"');







    return;







  }







  







  // ÊµãËØï‰∏ªURL







  console.log('üì° ÊµãËØï‰∏ªURL...');







  const httpSuccess = await testHttpConnection(baseUrl, apiKey);







  const wsSuccess = await testWebSocketConnection(baseUrl, apiKey);







  







  if (httpSuccess && wsSuccess) {







    console.log('\n‚úÖ ‰∏ªURLËøûÊé•Ê≠£Â∏∏ÔºåÊó†ÈúÄ‰ΩøÁî®Â§áÁî®URL');







    return;







  }







  







  // ÊµãËØïÂ§áÁî®URLs







  console.log('\nüì° ÊµãËØïÂ§áÁî®URLs...');







  let foundWorking = false;







  







  for (const url of fallbackUrls) {







    if (url === baseUrl) continue; // Ë∑≥ËøáÂ∑≤ÊµãËØïÁöÑ‰∏ªURL







    







    const httpOk = await testHttpConnection(url, apiKey);







    const wsOk = await testWebSocketConnection(url, apiKey);







    







    if (httpOk && wsOk) {







      console.log(`\n‚úÖ ÊâæÂà∞ÂèØÁî®ÁöÑÂ§áÁî®URL: ${url}`);







      console.log(`   Âª∫ËÆÆÂ∞ÜÊ≠§URLËÆæÁΩÆ‰∏∫‰∏ªURLÔºö`);







      console.log(`   export GEMINI_API_BASE_URL="${url}"`);







      foundWorking = true;







      break;







    }







  }







  







  if (!foundWorking) {







    console.log('\n‚ùå ÊâÄÊúâURLÈÉΩÊó†Ê≥ïËøûÊé•');







    console.log('   Âª∫ËÆÆÊ£ÄÊü•Ôºö');







    console.log('   1. ÁΩëÁªúËøûÊé•ÊòØÂê¶Ê≠£Â∏∏');







    console.log('   2. APIÂØÜÈí•ÊòØÂê¶Ê≠£Á°Æ');







    console.log('   3. ÊòØÂê¶ÈúÄË¶Å‰ΩøÁî®‰ª£ÁêÜ');







    console.log('   4. Èò≤ÁÅ´Â¢ôËÆæÁΩÆ');







  }







}















// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨







if (typeof window === 'undefined' && typeof process !== 'undefined') {







  runNetworkTest().catch(console.error);







}















// ÂØºÂá∫‰æõÂÖ∂‰ªñÊ®°Âùó‰ΩøÁî®







if (typeof module !== 'undefined' && module.exports) {







  module.exports = {







    testHttpConnection,







    testWebSocketConnection,







    runNetworkTest







  };







}







>>>>>>>



=======
/**

 * ÁΩëÁªúËøûÊé•ÊµãËØïËÑöÊú¨

 * Áî®‰∫éÊµãËØïGemini APIÁöÑÁΩëÁªúËøûÊé•ÂíåÊïÖÈöúËΩ¨ÁßªÊú∫Âà∂

 */



// ÊµãËØïHTTP APIËøûÊé•

async function testHttpConnection(baseUrl, apiKey) {

  console.log(`Testing HTTP connection to: ${baseUrl}`);

  

  try {

    const response = await fetch(`${baseUrl}/v1beta/models`, {

      headers: {

        'x-goog-api-key': apiKey,

        'x-goog-api-client': 'genai-js/0.21.0'

      }

    });

    

    if (response.ok) {

      console.log(`‚úÖ HTTP connection successful: ${baseUrl}`);

      return true;

    } else {

      console.log(`‚ùå HTTP connection failed: ${baseUrl} (Status: ${response.status})`);

      return false;

    }

  } catch (error) {

    console.log(`‚ùå HTTP connection error: ${baseUrl} (${error.message})`);

    return false;

  }

}



// ÊµãËØïWebSocketËøûÊé•

async function testWebSocketConnection(baseUrl, apiKey) {

  console.log(`Testing WebSocket connection to: ${baseUrl}`);

  

  return new Promise((resolve) => {

    const wsUrl = `${baseUrl.replace('https://', 'wss:')}/v1beta/models/gemini-live-2.5-flash-preview:streamingGenerateContent?key=${apiKey}`;

    

    const ws = new WebSocket(wsUrl);

    const timeout = setTimeout(() => {

      console.log(`‚ùå WebSocket connection timeout: ${baseUrl}`);

      ws.close();

      resolve(false);

    }, 10000);

    

    ws.onopen = () => {

      clearTimeout(timeout);

      console.log(`‚úÖ WebSocket connection successful: ${baseUrl}`);

      ws.close();

      resolve(true);

    };

    

    ws.onerror = (error) => {

      clearTimeout(timeout);

      console.log(`‚ùå WebSocket connection error: ${baseUrl}`);

      resolve(false);

    };

  });

}



// ‰∏ªÊµãËØïÂáΩÊï∞

async function runNetworkTest() {

  console.log('üîç ÂºÄÂßãÁΩëÁªúËøûÊé•ÊµãËØï...\n');

  

  // ‰ªéÁéØÂ¢ÉÂèòÈáèÊàñÈªòËÆ§ÂÄºËé∑ÂèñÈÖçÁΩÆ

  const apiKey = process.env.GEMINI_API_KEY || 'your-api-key-here';

  const baseUrl = process.env.GEMINI_API_BASE_URL || 'https://generativelanguage.googleapis.com';

  const fallbackUrls = (process.env.GEMINI_API_FALLBACK_URLS || 'https://generativelanguage.googleapis.com')

    .split(',').map(url => url.trim());

  

  console.log(`API Key: ${apiKey.substring(0, 10)}...`);

  console.log(`Base URL: ${baseUrl}`);

  console.log(`Fallback URLs: ${fallbackUrls.join(', ')}\n`);

  

  if (apiKey === 'your-api-key-here') {

    console.log('‚ö†Ô∏è  ËØ∑ËÆæÁΩÆ GEMINI_API_KEY ÁéØÂ¢ÉÂèòÈáè');

    console.log('   export GEMINI_API_KEY="your-actual-api-key"');

    return;

  }

  

  // ÊµãËØï‰∏ªURL

  console.log('üì° ÊµãËØï‰∏ªURL...');

  const httpSuccess = await testHttpConnection(baseUrl, apiKey);

  const wsSuccess = await testWebSocketConnection(baseUrl, apiKey);

  

  if (httpSuccess && wsSuccess) {

    console.log('\n‚úÖ ‰∏ªURLËøûÊé•Ê≠£Â∏∏ÔºåÊó†ÈúÄ‰ΩøÁî®Â§áÁî®URL');

    return;

  }

  

  // ÊµãËØïÂ§áÁî®URLs

  console.log('\nüì° ÊµãËØïÂ§áÁî®URLs...');

  let foundWorking = false;

  

  for (const url of fallbackUrls) {

    if (url === baseUrl) continue; // Ë∑≥ËøáÂ∑≤ÊµãËØïÁöÑ‰∏ªURL

    

    const httpOk = await testHttpConnection(url, apiKey);

    const wsOk = await testWebSocketConnection(url, apiKey);

    

    if (httpOk && wsOk) {

      console.log(`\n‚úÖ ÊâæÂà∞ÂèØÁî®ÁöÑÂ§áÁî®URL: ${url}`);

      console.log(`   Âª∫ËÆÆÂ∞ÜÊ≠§URLËÆæÁΩÆ‰∏∫‰∏ªURLÔºö`);

      console.log(`   export GEMINI_API_BASE_URL="${url}"`);

      foundWorking = true;

      break;

    }

  }

  

  if (!foundWorking) {

    console.log('\n‚ùå ÊâÄÊúâURLÈÉΩÊó†Ê≥ïËøûÊé•');

    console.log('   Âª∫ËÆÆÊ£ÄÊü•Ôºö');

    console.log('   1. ÁΩëÁªúËøûÊé•ÊòØÂê¶Ê≠£Â∏∏');

    console.log('   2. APIÂØÜÈí•ÊòØÂê¶Ê≠£Á°Æ');

    console.log('   3. ÊòØÂê¶ÈúÄË¶Å‰ΩøÁî®‰ª£ÁêÜ');

    console.log('   4. Èò≤ÁÅ´Â¢ôËÆæÁΩÆ');

  }

}



// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨

if (typeof window === 'undefined' && typeof process !== 'undefined') {

  runNetworkTest().catch(console.error);

}



// ÂØºÂá∫‰æõÂÖ∂‰ªñÊ®°Âùó‰ΩøÁî®

if (typeof module !== 'undefined' && module.exports) {

  module.exports = {

    testHttpConnection,

    testWebSocketConnection,

    runNetworkTest

  };

}

>>>>>>>
